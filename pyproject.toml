[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=6.3.1", "setuptools_scm_git_archive==1.1"]
build-backend = "setuptools.build_meta"

[project]
name = "dvc"
description = "Git for data scientists - manage your code and data together"
readme = "README.rst"
keywords = [
    "data-science", "data-version-control", "machine-learning", "git",
    "developer-tools", "reproducibility", "collaboration", "ai",
]
license = {text = "Apache License 2.0"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
authors = [{name = "Dmitry Petrov", email = "dmitry@dvc.org"}]
maintainers = [{name = "Iterative", email="support@dvc.org"}]
requires-python = ">=3.7"
dependencies = [
    "colorama>=0.3.9",
    "configobj>=5.0.6",
    "nanotime>=0.5.2",
    "voluptuous>=0.11.7",
    "requests>=2.22.0",
    # See https://github.com/bdcht/grandalf/issues/26
    "grandalf==0.6",
    "distro>=1.3.0",
    "appdirs>=1.4.3",
    "ruamel.yaml>=0.17.11",
    "toml>=0.10.1",
    "funcy>=1.14",
    "pathspec>=0.9.0,<0.10.0",
    "shortuuid>=0.5.0",
    "tqdm>=4.63.1,<5",
    "packaging>=19.0",
    "zc.lockfile>=1.2.1",
    "flufl.lock>=5",
    "networkx>=2.5",
    "psutil>=5.8.0",
    "pydot>=1.2.4",
    "importlib-metadata>=1.4; python_version < '3.8'",
    "importlib-resources>=5.2.2; python_version < '3.9'",
    "flatten_dict>=0.4.1,<1",
    "tabulate>=0.8.7",
    "pygtrie>=2.3.2",
    "dpath>=2.0.2,<3",
    "shtab>=1.3.4,<2",
    "rich>=10.13.0",
    "dictdiffer>=0.8.1",
    "python-benedict>=0.24.2",
    "pyparsing>=2.4.7",
    "typing-extensions>=3.7.4",
    "fsspec[http]>=2021.10.1",
    "aiohttp-retry>=2.4.5",
    "diskcache>=5.2.1",
    "jaraco.windows>=5.7.0; python_version < '3.8' and sys_platform == 'win32'",
    "scmrepo==0.0.18",
    "dvc-render==0.0.4",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://dvc.org"
Documentation = "https://dvc.org/doc"
Source = "https://github.com/iterative/dvc"

[project.scripts]
dvc = "dvc.cli:main"

[project.optional-dependencies]
all = [
    "dvc[azure]",
    "dvc[gdrive]",
    "dvc[gs]",
    "dvc[hdfs]",
    "dvc[oss]",
    "dvc[s3]",
    "dvc[ssh]",
    "dvc[webdav]",
]
dev = [
    "dvc[all]",
    "dvc[tests]",
]
# Extra dependencies for remote integrations
azure = [
    "adlfs>=2021.10.0",
    "azure-identity>=1.4.0",
    "knack",
]
gdrive = ["pydrive2[fsspec]>=1.9.4"]
gs = ["gcsfs>=2021.11.1"]
hdfs = [
    # due to https://github.com/python-poetry/poetry/issues/4683, we have to
    # explicitly specify pyarrow here
    "pyarrow>=1",
    "fsspec[arrow]",
]
oss = ["ossfs>=2021.8.0"]
s3 = ["s3fs[boto3]>=2021.11.1", "aiobotocore[boto3]>2"]
# due to https://github.com/python-poetry/poetry/issues/4683, we have to
# explicitly specify bcrypt here
ssh = ["bcrypt", "sshfs[bcrypt]>=2021.11.2"]
# gssapi should not be included in all_remotes, because it doesn't have wheels
# for Linux, so it will fail to compile if user doesn't have all the
# requirements, including kerberos itself.
ssh_gssapi = ["sshfs[gssapi]>=2021.11.2"]
webdav = ["webdav4>=0.9.3"]
# not to break `dvc[webhdfs]`
webhdfs = []
# requests-kerberos requires krb5 & gssapi, which does not provide wheels Linux
webdhfs_kerberos = ["requests-kerberos==0.14.0"]
terraform = ["tpi[ssh]>=2.1.0"]
tests = [
    "dvc[terraform]",
    "dvc_ssh==0.0.1a0",
    # Test requirements
    "pytest==7.1.1",
    "pytest-cov==3.0.0",
    "pytest-xdist==2.5.0",
    "pytest-mock==3.7.0",
    "pytest-lazy-fixture==0.6.3",
    # https://github.com/docker/docker-py/issues/2902
    "pytest-docker==0.11.0; python_version < '3.10' or sys_platform != 'win32'",
    "flaky==3.7.0",
    "mock==4.0.3",
    "pytest-timeout==2.1.0",
    "filelock==3.6.0",
    # pylint requirements
    "pylint==2.12.2",
    # we use this to suppress pytest-related false positives in our tests.
    "pylint-pytest==1.1.2",
    # we use this to suppress some messages in tests, eg: foo/bar naming,
    # and, protected method calls in our tests
    "pylint-plugin-utils==0.7",
    # type-checking
    "mypy==0.942",
    "types-requests>=2.27.15",
    "types-tabulate>=0.8.6",
    "types-toml>=0.10.4",
    # optional dependencies
    "pywin32>=225; sys_platform == 'win32'",
    "dvclive[image]==0.6.0",
]

[tool.setuptools]
zip-safe = false
license-files = ["LICENSE"]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "dvc._dvc_version.version"}

[tool.setuptools.packages.find]
exclude = ["dvc.testing", "dvc.testing.*", "tests", "tests.*"]

[tool.setuptools_scm]
write_to = "dvc/_dvc_version.py"

[tool.black]
line-length = 79
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
known_first_party = ["dvc", "tests"]
line_length = 79

[tool.flake8]
ignore = [
    "E203", # Whitespace before ':'
    "E266", # Too many leading '#' for block comment
    'W503', # Line break occurred before a binary operator
    "P1",  # unindexed parameters in the str.format, see:
    # https://pypi.org/project/flake8-string-format/
]
exclude = ".git, .dvc, .mypy_cache, .pytest_cache, build, dist"
max_line_length = 79
max-complexity = 15
select = "B,C,E,F,W,T4,B902,T,P"
show_source = true
count = true

[tool.pytest.ini_options]
log_level = "debug"
addopts = "-ra"
markers = [
    "needs_internet: Might need network access for the tests",
]

[tool.mypy]
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
# See https://mypy.readthedocs.io/en/latest/running_mypy.html#missing-imports.
ignore_missing_imports = true
check_untyped_defs = false
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
files = ["dvc"]

[tool.pylint.master]
extension-pkg-whitelist = ["pygit2"]
init-hook = "import sys; sys.path.append(str('tests'))"
load-plugins = ["pylint_pytest", "pylint_plugin_disable"]

[tool.pylint.message_control]
disable = [
    "format", "refactoring", "spelling", "design", "no-self-use",
    "invalid-name", "misplaced-comparison-constant", "duplicate-code", "fixme",
    "unused-wildcard-import", "cyclic-import", "wrong-import-order",
    "wrong-import-position", "ungrouped-imports", "multiple-imports",
    "logging-format-interpolation", "logging-fstring-interpolation",
    "missing-function-docstring", "missing-module-docstring",
    "missing-class-docstring", "raise-missing-from", "import-outside-toplevel",
]
enable = ["c-extension-no-member", "no-else-return"]

[tool.pylint.typecheck]
generated-members = ["pytest.lazy_fixture", "logging.TRACE", "logger.trace", "sys.getwindowsversion", "argparse.Namespace"]
ignored-classes = ["Dvcfile"]
ignored-modules = ["azure"]
signature-mutators = ["funcy.decorators.decorator"]

[tool.pylint.variables]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_|args|kwargs"
